#summary Pyprocessing Quick Reference

<wiki:toc max_depth="2" />

=Introduction=
You will find below a short (and I mean _short_) summary of the functions and variables
defined by pyprocessing. Each entry contains a Processing feature
with a link to the reference page of that feature in the Processing site, the pyprocessing
equivalent, if any, and a brief description of that feature. 

As a rule,
pyprocessing functions have exactly the same name of their Processing counterparts,
and allow the same argument variations. On the other hand, global variables
necessarily have to follow a different naming convention in pyprocessing. When a
global variable names in Processing is a composite word, the corresponding
pyprocessing name is the first word followed by the remaining words in lowercase.
For instance, Processing's `mouseX` variable is called `mouse.x` in pyprocessing. 
The notable exception is `key`, which is equivalent to `key.char` in pyprocessing.

This is still incomplete! Browsing the examples in the repository 
will give you a more up-to-date picture of pyprocessing's features. 

=Structure=

<table border="0" cellpadding="2" cellspacing="0" width="600px">
<tbody>
    <tr>
      <td width="100">*Processing* </td>
      <td width="100">*pyprocessing*</td>
      <td width="400">*Description*</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/draw_.html">draw()</a></td>
      <td> `draw()`</td>
      <td> a function of your program that is called for drawing
a frame</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/exit_.html">exit()</a></td>
      <td> `exit()`</td>
      <td> exits the application</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/loop_.html">loop()</a></td>
      <td> `loop()`</td>
      <td> makes `draw()` be called periodically</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/noLoop_.html">noLoop()</a></td>
      <td> `noLoop()`</td>
      <td> stops `draw()` fro being called periodically</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/popStyle_.html">popStyle()</a></td>
      <td> `popStyle()`</td>
      <td> restores the prior style settings</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/pushStyle_.html">pushStyle()</a></td>
      <td> `pushStyle()`</td>
      <td> saves the current style settings</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/redraw_.html">redraw()</a></td>
      <td> `redraw`</td>
      <td></td>
    </tr>
    <tr>
      <td>N/A</td>
      <td> `run()`</td>
      <td> your program should call this to map the drawing
window and start the event loop</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/setup_.html">setup()</a></td>
      <td> `setup()`</td>
      <td> a function of your program that is called
automatically once by run()</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/size_.html">size()</a></td>
      <td> `size()`</td>
      <td> used to establish the dimensions of the drawing window</td>
    </tr>
  </tbody>
</table>
<br>

=Image=

<table border="0" cellpadding="2" cellspacing="0" width="600px">
<tbody>
    <tr>
      <td width="100">*Processing* </td>
      <td width="100">*pyprocessing*</td>
      <td width="400">*Description*</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/createImage_.html">createImage()</a></td>
      <td> `createImage()`</td>
      <td> creates an empty PImage object</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/image_.html">image()</a></td>
      <td> `image()`</td>
      <td> displays a PImage object</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/imageMode_.html">imageMode()</a></td>
      <td> `imageMode()`</td>
      <td> changes the semantics of the arguments of `image()` </td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/loadImage_.html">loadImage()</a></td>
      <td> `loadImage()`</td>
      <td> loads an image into a PImage object</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/loadPixels_.html">loadPixels()</a></td>
      <td> `loadPixels()`</td>
      <td> loads the current canvas data into screen.pixels</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/updatePixels_.html">updatePixels()</a></td>
      <td> `updatePixels()`</td>
      <td> displays the data from screen.pixels</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/get_.html">get()</a></td>
      <td> `get()`</td>
      <td> returns a copy, a part of a pixel of the screen</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/set_.html">set()</a></td>
      <td> `setScreen()`</td>
      <td> sets a position of the screen with data</td>
    </tr>
  </tbody>
</table>
<br>

= Environment =

<table border="0" cellpadding="2" cellspacing="0" width="600px">
    <tr>
      <td width="100">*Processing* </td>
      <td width="100">*pyprocessing*</td>
      <td width="400">*Description*</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/cursor_.html">cursor()</a></td>
      <td>`cursor()`</td>
      <td>Changes or shows the mouse cursor.</td>
    </tr>
    <tr>
      <td><a href="http://processing.org/reference/delay_.html">delay()</a></td>
      <td>`delay()`</td>
      <td> stops the program from running for a specified time</td>
    </tr>
    <tr>
      <td><a href="http://processing.org/reference/day_.html">day()</a></td>
      <td>`day()`</td>
      <td> returns the value of the current day</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/focused.html">focused</a></td>
      <td>N/A</td>
      <td></td>
    </tr>
    <tr>
      <td><a  href="http://www.processing.org/reference/frameCount.html"> frameCount</a></td>
      <td>`frame.count`</td>
      <td>Number of frames drawn so far.</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/frameRate_.html">frameRate()</a></td>
      <td>`frameRate()`</td>
      <td>Sets the number of times `draw()` will be called per second.</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/frameRate.html">frameRate</a></td>
      <td>`frame.rate`</td>
      <td>Estimated number of frames per second for the recent past.</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/height.html">height</a></td>
      <td>`height`</td>
      <td>Height of the drawing window in pixels.</td>
    </tr>
    <tr>
      <td><a href="http://processing.org/reference/hour_.html">hour()</a></td>
      <td>`hour()`</td>
      <td> returns the value of the current hour</td>
    </tr>
    <tr>
      <td><a href="http://processing.org/reference/millis_.html">millis()</a></td>
      <td>`millis()`</td>
      <td> returns the amount of milliseconds since starting a program</td>
    </tr>
    <tr>
      <td><a href="http://processing.org/reference/minute_.html">minute()</a></td>
      <td>`minute()`</td>
      <td> returns the value of the current minute</td>
    </tr>
    <tr>
      <td><a href="http://processing.org/reference/month_.html">month()</a></td>
      <td>`month()`</td>
      <td> returns the value of the current month</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/noCursor_.html">noCursor()</a></td>
      <td>`noCursor()`</td>
      <td>Inhibits the display of the mouse cursor.</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/online.html">online</a></td>
      <td>N/A</td>
      <td></td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/screen.html">screen</a></td>
      <td>`screen`</td>
      <td>holds the width and height of the display.</td>
    </tr>
    <tr>
      <td><a href="http://processing.org/reference/second_.html">second()</a></td>
      <td>`second()`</td>
      <td> returns the value of the current second</td>
    </tr>
    <tr>
      <td><a href="http://processing.org/reference/year_.html">year()</a></td>
      <td>`year()`</td>
      <td> returns the value of the current year</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/width.html">width</a></td>
      <td>`width`</td>
      <td>width of the drawing window in pixels</td>
    </tr>
</table>
<br>

=Color=
==_Setting_==
<table border="0" cellpadding="2" cellspacing="0" width="600px">
 <tbody>
     <tr>
      <td width="100">*Processing* </td>
      <td width="100">*pyprocessing*</td>
      <td width="400">*Description*</td>
    </tr>
 
    <tr>
      <td><a href="http://www.processing.org/reference/background_.html">background()</a></td>
      <td> `background()`</td>
      <td> clears the drawing with a background color</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/colorMode_.html">colorMode()</a></td>
      <td> `colorMode()`</td>
      <td> sets up the color system (RGB or HSB) for specifying
colors</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/fill_.html">fill()</a></td>
      <td> `fill()`</td>
      <td> specifies the color for drawing filled shapes</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/noFill_.html">noFill()</a></td>
      <td> `noFill()`</td>
      <td> makes shapes be rendered non-filled</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/noStroke_.html">noStroke()</a></td>
      <td> `noStroke()`</td>
      <td> makes shapes be rendered without their borders</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/stroke_.html">stroke()</a></td>
      <td> `stroke()`</td>
      <td> specifies the color for drawing lines and shape borders</td>
    </tr>
  </tbody>
</table>
==_Creating & Reading_==
<table border="0" cellpadding="2" cellspacing="0" width="600px">
 <tbody>
     <tr>
      <td width="100">*Processing* </td>
      <td width="100">*pyprocessing*</td>
      <td width="400">*Description*</td>
    </tr>
     <tr>
      <td><a href="http://www.processing.org/reference/alpha_.html">alpha()</a></td>
      <td> `alpha()`</td>
      <td> returns the alpha (transparency) component of a color</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/blendColor_.html">blendColor()</a></td>
      <td> `blendColor()`</td>
      <td> returns the blending between two colors</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/blue_.html">blue()</a></td>
      <td> `blue()`</td>
      <td> returns the blue component of a color</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/brightness_.html">brightness()</a></td>
      <td>`brightness()`</td>
      <td> returns the brightness of a color</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/color_.html">color()</a></td>
      <td> `color()`</td>
      <td> builds a color value from its components</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/green_.html">green()</a></td>
      <td>`green()`</td>
      <td> returns the green component of a color</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/hue_.html">hue()</a></td>
      <td> `hue()`</td>
      <td> returns the hue of a color</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/lerpColor_.html">lerpColor()</a></td>
      <td> `lerpColor()`</td>
      <td> returns a linear interpolation between two colors</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/red_.html">red()</a></td>
      <td> `red()`</td>
      <td> returns the red component of a color</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/saturation_.html">saturation()</a></td>
      <td> `saturation()`</td>
      <td> returns the saturation of a color</td>
    </tr>
  </tbody>
</table>
<br>

=Shape=
==_2D Primitives_==

<table border="0" cellpadding="2" cellspacing="0" width="600px">
    <tr>
      <td width="100">*Processing* </td>
      <td width="100">*pyprocessing*</td>
      <td width="400">*Description*</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/arc_.html">arc()</a></td>
      <td>`arc()`</td>
      <td>draws an arc of ellipse</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/ellipse_.html">ellipse()</a></td>
      <td>`ellipse()`</td>
      <td>draws an ellipse</td>
    </tr>
    <tr>
      <td><a  href="http://www.processing.org/reference/line_.html">line()</a></td>
      <td>`line()`</td>
      <td>draws a line segment</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/point_.html">point()</a></td>
      <td>`point()`</td>
      <td>draws a point</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/quad_.html">quad()</a></td>
      <td>`quad()`</td>
      <td>draws a quadrilateral</td>
    </tr>
    <tr>
      <td><a  href="http://www.processing.org/reference/rect_.html">rect()</a></td>
      <td>`rect()`</td>
      <td>draws a rectangle</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/triangle_.html">triangle()</a></td>
      <td>`triangle()`</td>
      <td>draws a triangle</td>
    </tr>
</table>

==_3D Primitives_==
<table border="0" cellpadding="2" cellspacing="0" width="600px">
<tbody>
    <tr>
      <td width="100">*Processing* </td>
      <td width="100">*pyprocessing*</td>
      <td width="400">*Description*</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/box_.html">box()</a></td>
      <td>`box()`</td>
      <td>draws a parallelepiped</td>
    </tr>
    <tr>
      <td><a  href="http://www.processing.org/reference/sphere_.html">sphere()</a></td>
      <td>`sphere()`</td>
      <td>draws a sphere</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/sphereDetail_.html">sphereDetail()</a></td>
      <td>`sphereDetail()`</td>
      <td>sets the level of detail used to render spheres</td>
    </tr>
  </tbody>
</table>

== _Curves_ ==

<table border="0" cellpadding="2" cellspacing="0" width="600px">
    <tr>
      <td width="100">*Processing* </td>
      <td width="100">*pyprocessing*</td>
      <td width="400">*Description*</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/bezier_.html">bezier()</a></td>
      <td>`bezier()`</td>
      <td> Draws a cubic Bézier curve</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/bezierDetail_.html">bezierDetail()</a></td>
      <td>`bezierDetail()`</td>
      <td> Changes sampling rate of Bézier curves</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/bezierPoint_.html">bezierPoint()</a></td>
      <td>`bezierPoint()`</td>
      <td> Evaluates one coordinate of a point on a Bézier curve</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/bezierTangent_.html">bezierTangent()</a></td>
      <td>`bezierTangent()`</td>
      <td> Evaluates one coordinate of a tangent of a Bézier curve</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/curve_.html">curve()</a></td>
      <td>`curve()`</td>
      <td> Draws a cubic Catmull-Rom curve</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/curveDetail_.html">curveDetail()</a></td>
      <td>`curveDetail()`</td>
      <td> Changes the sampling rate of Catmull-Rom curves</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/curvePoint_.html">curvePoint()</a></td>
      <td>`curvePoint()`</td>
      <td> Evaluates one coordinate of a point of
a Catmull-Rom curve</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/curveTangent_.html">curveTangent()</a></td>
      <td>`curveTangent()`</td>
      <td> Evaluates one coordinate of a tangent of
a Catmull-Rom curve</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/curveTightness_.html">curveTightness()</a>
</td>
      <td> `curveTightness()`</td>
      <td> Changes the tightness of Catmull-Rom curves</td>
    </tr>
</table>

==_Attributes_==
<table border="0" cellpadding="2" cellspacing="0" width="600px">
<tbody>
    <tr>
      <td width="100">*Processing* </td>
      <td width="100">*pyprocessing*</td>
      <td width="400">*Description*</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/noSmooth_.html">noSmooth()</a></td>
      <td> `noSmooth()`</td>
      <td>renders in non-antialiased mode</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/rectMode_.html">rectMode()</a></td>
      <td> `rectMode()`</td>
      <td> changes the semantics of the arguments of `rect()`</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/smooth_.html">smooth()</a></td>
      <td> `smooth()`</td>
      <td> renders in antialiased mode</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/strokeCap_.html">strokeCap()</a></td>
      <td> N/A</td>
      <td></td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/strokeJoin_.html">strokeJoin()</a></td>
      <td> N/A</td>
      <td></td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/strokeWeight_.html">strokeWeight()</a></td>
      <td>`strokeWeight()`</td>
      <td>changes the thickness of lines</td>
    </tr>
  </tbody>
</table>

==_Vertex_==
<table border="0" cellpadding="2" cellspacing="0" width="600px">
<tbody>
    <tr>
      <td width="100">*Processing* </td>
      <td width="100">*pyprocessing*</td>
      <td width="400">*Description*</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/bezierVertex_.html">bezierVertex()</a></td>
      <td> `bezierVertex()`</td>
      <td> adds a Bézier arc to the shape</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/curveVertex_.html">curveVertex()</a></td>
      <td> `curveVertex()`</td>
      <td> adds a Catmull-Rom arc to the shape</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/endShape_.html">endShape()</a></td>
      <td> `endVertex()`</td>
      <td> finishes the shape</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/texture_.html">texture()</a></td>
      <td> N/A</td>
      <td></td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/textureMode_.html">textureMode()</a></td>
      <td> N/A</td>
      <td></td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/vertex_.html">vertex()</a></td>
      <td>`vertex()`</td>
      <td> adds a vertex to the shape</td>
    </tr>
  </tbody>
</table>

<br>

=Input=

==_Mouse_==

<table border="0" cellpadding="2" cellspacing="0" width="600px">
<tbody>
    <tr>
      <td width="100">*Processing* </td>
      <td width="100">*pyprocessing*</td>
      <td width="400">*Description*</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/mouseButton.html">mouseButton</a></td>
      <td> `mouse.button`</td>
      <td> tells what mouse button is pressed.</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/mouseClicked_.html">mouseClicked()</a></td>
      <td> `mouseClicked()`</td>
      <td> called when a mouse button is pressed and released</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/mouseDragged_.html">mouseDragged()</a></td>
      <td> `mouseDragged()`</td>
      <td>called when a mouse is dragged with a pressed button</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/mouseMoved_.html">mouseMoved()</a></td>
      <td> `mouseMoved()`</td>
      <td>called when a mouse is moved with buttons pressed</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/mousePressed_.html">mousePressed()</a></td>
      <td> `mousePressed()`</td>
      <td> called when a mouse button is pressed</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/mousePressed.html">mousePressed</a></td>
      <td> `mouse.pressed`</td>
      <td> tells whether a mouse button is pressed</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/mouseReleased_.html">mouseReleased()</a></td>
      <td> `mouseReleased()`</td>
      <td> called when a mouse button is released</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/mouseX.html">mouseX</a></td>
      <td> `mouse.x`</td>
      <td> current _x_ position of the mouse</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/mouseY.html">mouseY</a></td>
      <td> `mouse.y`</td>
      <td> current _y_ position of the mouse</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/pmouseX.html">pmouseX</a></td>
      <td>`pmouse.x`</td>
      <td> previous _x_ position of the mouse</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/pmouseY.html">pmouseY</a></td>
      <td>`pmouse.y`</td>
      <td> previous _y_ position of the mouse
      </td>
    </tr>
  </tbody>
</table>

==_Keyboard_==

<table border="0" cellpadding="2" cellspacing="0" width="600px">
<tbody>
    <tr>
      <td width="100">*Processing* </td>
      <td width="100">*pyprocessing*</td>
      <td width="400">*Description*</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/key.html">key</a></td>
      <td> `key.char`</td>
      <td> holds the char value of the most recently pressed key</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/keyCode.html">keyCode</a></td>
      <td> `key.code`</td>
      <td> holds an int code of the most recently pressed key</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/keyPressed_.html">keyPressed()</a></td>
      <td> `keyPressed()`</td>
      <td> called when a key is pressed</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/keyPressed.html">keyPressed</a></td>
      <td> `key.pressed()`</td>
      <td> tells whether a key is pressed</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/keyReleased_.html">keyReleased()</a></td>
      <td> `keyReleased()`</td>
      <td> called when a key is released</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/keyTyped_.html">keyTyped()</a></td>
      <td> `keyTyped()`</td>
      <td> called when a non-code key is pressed</td>
    </tr>
  </tbody>
</table>
<br>

=Transform=
<table border="0" cellpadding="2" cellspacing="0" width="600px">
<tbody>
    <tr>
      <td width="100">*Processing* </td>
      <td width="100">*pyprocessing*</td>
      <td width="400">*Description*</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/applyMatrix_.html">applyMatrix()</a></td>
      <td> `applyMatrix()`</td>
      <td> multiplies the current transformation matrix by a
given matrix</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/popMatrix_.html">popMatrix()</a></td>
      <td> `popMatrix()`</td>
      <td> discards the current (top) matrix from the
transformation matrix stack</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/printMatrix_.html">printMatrix()</a></td>
      <td> `printMatrix()`</td>
      <td> prints the current transformation matrix</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/pushMatrix_.html">pushMatrix()</a></td>
      <td> `pushMatrix()`</td>
      <td> pushes a copy of the current matrix onto the
transformation matrix stack</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/resetMatrix_.html">resetMatrix()</a></td>
      <td> `resetMatrix()`</td>
      <td> sets an identity matrix as the the current
transformation matrix</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/rotate_.html">rotate()</a></td>
      <td> `rotate()`</td>
      <td> rotates around a given axis</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/rotateX_.html">rotateX()</a></td>
      <td> `rotateX()`</td>
      <td> rotates around the _x_ axis</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/rotateY_.html">rotateY()</a></td>
      <td> `rotateY()`</td>
      <td> rotates around the _y_ axis</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/rotateZ_.html">rotateZ()</a></td>
      <td> `rotateZ()`</td>
      <td> rotates around the _z_ axis</td>
    </tr>

    <tr>
      <td><a href="http://processing.org/reference/shearX_.html">shearX()</a></td>
      <td> `shearX()`</td>
      <td> shears a shape around the _x_ axis</td>
    </tr>
    <tr>
      <td><a href="http://processing.org/reference/shearY_.html">shearY()</a></td>
      <td> `shearY()`</td>
      <td> shears a shape around the _y_ axis</td>
    </tr>

    <tr>
      <td><a href="http://www.processing.org/reference/scale_.html">scale()</a></td>
      <td> `scale()`</td>
      <td> performs a scale transformation</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/translate_.html">translate()</a></td>
      <td> `translate()`</td>
      <td> performs a translation transformation</td>
    </tr>
  </tbody>
</table>
<br>

=Lights, Camera=
==_Lights_==
<table border="0" cellpadding="2" cellspacing="0" width="600px">
<tbody>
    <tr>
      <td width="100">*Processing* </td>
      <td width="100">*pyprocessing*</td>
      <td width="400">*Description*</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/ambientLight_.html">ambientLight()</a></td>
      <td>`ambientLight()`</td>
      <td>adds an ambient light source</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/directionalLight_.html">directionalLight()</a></td>
      <td>`directionalLight`</td>
      <td> adds a directional light source</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/lightFalloff_.html">lightFalloff()</a></td>
      <td>`lightFalloff()`</td>
      <td>sets attenuation factors for next light sources</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/lightSpecular_.html">lightSpecular()</a></td>
      <td>`lightSpecular()`</td>
      <td>sets specular coefficients for next light sources</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/lights_.html">lights()</a></td>
      <td>`lights()`</td>
      <td> turns on lighting and default light sources</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/noLights_.html">noLights()</a></td>
      <td>`noLights()`</td>
      <td> turns off lighting</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/normal_.html">normal()</a></td>
      <td>`normal()`</td>
      <td> sets the normal vector for subsequent vertices</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/pointLight_.html">pointLight()</a></td>
      <td>`pointLight()`</td>
      <td>adds a point light source</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/spotLight_.html">spotLight()</a></td>
      <td>`spotLight()`</td>
      <td> adds a spot light source</td>
    </tr>
  </tbody>
</table>

==_Camera_==
<table border="0" cellpadding="2" cellspacing="0" width="600px">
<tbody>
    <tr>
      <td width="100">*Processing* </td>
      <td width="100">*pyprocessing*</td>
      <td width="400">*Description*</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/beginCamera_.html">beginCamera()</a></td>
      <td>N/A</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/camera_.html">camera()</a></td>
      <td>`camera()`</td>
      <td>sets the camera transformation</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/endCamera_.html">endCamera()</a></td>
      <td>N/A</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/frustum_.html">frustum()</a></td>
      <td>N/A</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/ortho_.html">ortho()</a></td>
      <td>`ortho()`</td>
      <td> sets an orthogonal projection</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/perspective_.html">perspective()</a></td>
      <td>`perspective()`</td>
      <td> sets a perspective projection</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/printCamera_.html">printCamera()</a></td>
      <td>`printCamera()`</td>
      <td> prints the current transformation matrix</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/printProjection_.html">printProjection()</a></td>
      <td>`printProjection()`</td>
      <td> prints the current projection matrix</td>
    </tr>
  </tbody>
</table>

==_Coordinates_==
<table border="0" cellpadding="2" cellspacing="0" width="600px">
<tbody>
    <tr>
      <td width="100">*Processing* </td>
      <td width="100">*pyprocessing*</td>
      <td width="400">*Description*</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/modelX_.html">modelX()</a></td>
      <td>`modelX()`</td>
      <td> returns the screen _x_ coordinate of given object
coordinates</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/modelY_.html">modelY()</a></td>
      <td>`modelY()`</td>
      <td>returns the screen _y_ coordinate of given object
coordinates</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/modelZ_.html">modelZ()</a></td>
      <td>`modelZ()`</td>
      <td>returns the screen _z_ coordinate of given object
coordinates</td>
    </tr>
    <tr>
      <td><span style="text-decoration: underline;"></span>N/A</td>
      <td>`modelXYZ()`</td>
      <td> returns the screen coordinates of given object
coordinates</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/screenX_.html">screenX()</a></td>
      <td>`screenX()`</td>
      <td>returns the screen _x_ coordinate of given object
coordinates</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/screenY_.html">screenY()</a></td>
      <td>`screenY()`</td>
      <td>returns the screen _y_ coordinate of given object
coordinates</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/screenZ_.html">screenZ()</a></td>
      <td>`screenY()`</td>
      <td>returns the screen _z_ coordinate of given object
coordinates</td>
    </tr>
    <tr>
      <td><span style="text-decoration: underline;"></span>N/A</td>
      <td>`screenXYZ()`</td>
      <td> returns the screen coordinates of given object
coordinates</td>
    </tr>
  </tbody>
</table>

==_Material Properties_==
<table border="0" cellpadding="2" cellspacing="0" width="600px">
<tbody>
    <tr>
      <td width="100">*Processing* </td>
      <td width="100">*pyprocessing*</td>
      <td width="400">*Description*</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/ambient_.html">ambient()</a></td>
      <td>`ambient()`</td>
      <td> sets the ambient properties of the next vertices</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/emissive_.html">emissive()</a></td>
      <td>`emissive()`</td>
      <td> sets the emissive properties of the next vertices</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/shininess_.html">shininess()</a></td>
      <td>`shininess()`</td>
      <td> sets the shininess property of the next vertices</td>
    </tr>
    <tr>
      <td><a href="http://www.processing.org/reference/specular_.html">specular()</a></td>
      <td>`specular()`</td>
      <td> sets the specular properties of the next vertices</td>
    </tr>
  </tbody>
</table>